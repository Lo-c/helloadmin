// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/role.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	api "helloadmin/internal/role"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRoleService is a mock of RoleService interface.
type MockRoleService struct {
	ctrl     *gomock.Controller
	recorder *MockRoleServiceMockRecorder
}

// MockRoleServiceMockRecorder is the mock recorder for MockRoleService.
type MockRoleServiceMockRecorder struct {
	mock *MockRoleService
}

// NewMockRoleService creates a new mock instance.
func NewMockRoleService(ctrl *gomock.Controller) *MockRoleService {
	mock := &MockRoleService{ctrl: ctrl}
	mock.recorder = &MockRoleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleService) EXPECT() *MockRoleServiceMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockRoleService) CreateRole(ctx context.Context, request *api.RoleCreateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRoleServiceMockRecorder) CreateRole(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRoleService)(nil).CreateRole), ctx, request)
}

// DeleteRole mocks base method.
func (m *MockRoleService) DeleteRole(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockRoleServiceMockRecorder) DeleteRole(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRoleService)(nil).DeleteRole), ctx, id)
}

// GetRoleById mocks base method.
func (m *MockRoleService) GetRoleById(ctx context.Context, id int64) (*api.RoleResponseItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleById", ctx, id)
	ret0, _ := ret[0].(*api.RoleResponseItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleById indicates an expected call of GetRoleById.
func (mr *MockRoleServiceMockRecorder) GetRoleById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleById", reflect.TypeOf((*MockRoleService)(nil).GetRoleById), ctx, id)
}

// SearchRole mocks base method.
func (m *MockRoleService) SearchRole(ctx context.Context, request *api.RoleFindRequest) (*[]api.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRole", ctx, request)
	ret0, _ := ret[0].(*[]api.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRole indicates an expected call of SearchRole.
func (mr *MockRoleServiceMockRecorder) SearchRole(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRole", reflect.TypeOf((*MockRoleService)(nil).SearchRole), ctx, request)
}

// UpdateRole mocks base method.
func (m *MockRoleService) UpdateRole(ctx context.Context, id int64, request *api.RoleUpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, id, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockRoleServiceMockRecorder) UpdateRole(ctx, id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRoleService)(nil).UpdateRole), ctx, id, request)
}
